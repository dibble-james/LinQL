#nullable enable
#pragma warning disable CS8618
namespace Shiftshare.Graph
{
    using LinQL;
    using LinQL.Description;
    using LinQL.Translation;
    using Microsoft.Extensions.Logging;
    using Microsoft.Extensions.DependencyInjection;
    using NodaTime;

    [OperationType(RootOperationType.Query)]
    public partial class Query : RootType<Query>
    {
        public User? Me { get; set; }

        public IEvent[] Events { get; set; } = null !;
        [GraphQLOperation, GraphQLField(Name = "events")]
        public IEvent[] ExecuteEvents(global::System.Guid calendar, global::NodaTime.OffsetDateTime from, global::NodaTime.OffsetDateTime to) => Events;
    }

    [OperationType(RootOperationType.Mutation)]
    public partial class Mutation : RootType<Mutation>
    {
        public User RegisterUser { get; set; }

        public IEvent CancelEvent { get; set; } = null !;
        [GraphQLOperation, GraphQLField(Name = "cancelEvent")]
        public IEvent ExecuteCancelEvent(global::System.Guid calendarId, global::System.Guid id) => CancelEvent;
        public Calendar CreateCalendar { get; set; } = null !;
        [GraphQLOperation, GraphQLField(Name = "createCalendar")]
        public Calendar ExecuteCreateCalendar(CreateCalendarInput input) => CreateCalendar;
        public IEvent RescheduleShift { get; set; } = null !;
        [GraphQLOperation, GraphQLField(Name = "rescheduleShift")]
        public IEvent ExecuteRescheduleShift(global::System.Guid calendarId, global::System.Guid id, global::NodaTime.OffsetDate date) => RescheduleShift;
        public IEvent ScheduleShift { get; set; } = null !;
        [GraphQLOperation, GraphQLField(Name = "scheduleShift")]
        public IEvent ExecuteScheduleShift(global::System.Guid calendarId, global::System.Guid shiftType, global::NodaTime.OffsetDate date) => ScheduleShift;
        public Calendar SetupShiftType { get; set; } = null !;
        [GraphQLOperation, GraphQLField(Name = "setupShiftType")]
        public Calendar ExecuteSetupShiftType(global::System.Guid calendarId, ShiftTypeInput shiftType) => SetupShiftType;
        public ICalendarEvent[] SyncCalendarEvents { get; set; } = null !;
        [GraphQLOperation, GraphQLField(Name = "syncCalendarEvents")]
        public ICalendarEvent[] ExecuteSyncCalendarEvents(global::System.Guid calendar, global::NodaTime.OffsetDateTime after, CalendarEventInput[] newEvents) => SyncCalendarEvents;
    }

    public enum ApplyPolicy
    {
        BEFORE_RESOLVER,
        AFTER_RESOLVER
    }

    public partial interface IEvent
    {
        public global::System.Guid Calendar { get; set; }

        public global::System.Guid Id { get; set; }

        public global::NodaTime.OffsetDate Date { get; set; }
    }

    public partial class Shift : IEvent
    {
        public IEvent Cancel { get; set; }

        public global::System.Guid ShiftType { get; set; }

        public global::System.Guid Calendar { get; set; }

        public global::System.Guid Id { get; set; }

        public int Version { get; set; }

        public global::System.Guid CorrelationId { get; set; }

        public string? State { get; set; }

        public global::NodaTime.OffsetDate Date { get; set; }

        public IEvent Reschedule { get; set; } = null !;
        [GraphQLOperation, GraphQLField(Name = "reschedule")]
        public IEvent ExecuteReschedule(global::NodaTime.OffsetDate to) => Reschedule;
    }

    public partial class User
    {
        public global::System.Guid Id { get; set; }

        public string Email { get; set; }

        public string Name { get; set; }

        public string Avatar { get; set; }

        public Calendar[] Calendars { get; set; }
    }

    public partial class Calendar
    {
        public global::System.Guid Id { get; set; }

        public string Name { get; set; }

        public CalendarAccess[] Access { get; set; }

        public ShiftType[] ShiftTypes { get; set; }

        public Shift ScheduleShift { get; set; } = null !;
        [GraphQLOperation, GraphQLField(Name = "scheduleShift")]
        public Shift ExecuteScheduleShift(global::System.Guid shiftType, global::NodaTime.OffsetDate date) => ScheduleShift;
    }

    public partial class CalendarAccess
    {
        public global::System.Guid User { get; set; }

        public PermissionAttributes Permission { get; set; }
    }

    public enum PermissionAttributes
    {
        OWNER
    }

    public partial class ShiftType
    {
        public global::System.Guid Id { get; set; }

        public string Name { get; set; }

        public global::NodaTime.OffsetTime Starts { get; set; }

        public global::NodaTime.Duration Duration { get; set; }
    }

    public partial class CreateCalendarInput
    {
        public global::System.Guid Id { get; set; }

        public string Name { get; set; }
    }

    public partial class ShiftTypeInput
    {
        public global::System.Guid Id { get; set; }

        public string Name { get; set; }

        public global::NodaTime.OffsetTime Starts { get; set; }

        public global::NodaTime.Duration Duration { get; set; }
    }

    public partial interface ICalendarEvent
    {
        public global::System.Guid Id { get; set; }

        public global::NodaTime.OffsetDateTime Raised { get; set; }

        public global::System.Guid Calendar { get; set; }

        public global::System.Guid EventId { get; set; }
    }

    public partial class ShiftScheduled : ICalendarEvent
    {
        public global::System.Guid ShiftType { get; set; }

        public global::NodaTime.OffsetDate Date { get; set; }

        public global::System.Guid Id { get; set; }

        public global::NodaTime.OffsetDateTime Raised { get; set; }

        public global::System.Guid Calendar { get; set; }

        public global::System.Guid EventId { get; set; }
    }

    public partial class ShiftRescheduled : ICalendarEvent
    {
        public global::NodaTime.OffsetDate Date { get; set; }

        public global::System.Guid Id { get; set; }

        public global::NodaTime.OffsetDateTime Raised { get; set; }

        public global::System.Guid Calendar { get; set; }

        public global::System.Guid EventId { get; set; }
    }

    public partial class EventCancelled : ICalendarEvent
    {
        public global::System.Guid Id { get; set; }

        public global::NodaTime.OffsetDateTime Raised { get; set; }

        public global::System.Guid Calendar { get; set; }

        public global::System.Guid EventId { get; set; }
    }

    public partial class CalendarEventInput
    {
        public ShiftScheduledInput? ShiftScheduled { get; set; }

        public ShiftRescheduledInput? ShiftRescheduled { get; set; }

        public EventCancelledInput? EventCancelled { get; set; }
    }

    public partial class ShiftScheduledInput
    {
        public global::System.Guid ShiftType { get; set; }

        public global::NodaTime.OffsetDate Date { get; set; }

        public global::System.Guid Id { get; set; }

        public global::NodaTime.OffsetDateTime Raised { get; set; }

        public global::System.Guid Calendar { get; set; }

        public global::System.Guid EventId { get; set; }
    }

    public partial class ShiftRescheduledInput
    {
        public global::NodaTime.OffsetDate Date { get; set; }

        public global::System.Guid Id { get; set; }

        public global::NodaTime.OffsetDateTime Raised { get; set; }

        public global::System.Guid Calendar { get; set; }

        public global::System.Guid EventId { get; set; }
    }

    public partial class EventCancelledInput
    {
        public global::System.Guid Id { get; set; }

        public global::NodaTime.OffsetDateTime Raised { get; set; }

        public global::System.Guid Calendar { get; set; }

        public global::System.Guid EventId { get; set; }
    }

    public static class LinQLOptionExtensions
    {
        public static LinQLOptions WithKnownScalars(this LinQLOptions options)
        {
            options.Scalars.Add(new("Int", "int"));
            options.Scalars.Add(new("Float", "float"));
            options.Scalars.Add(new("String", "string"));
            options.Scalars.Add(new("Id", "string"));
            options.Scalars.Add(new("Boolean", "bool"));
            options.Scalars.Add(new("UUID", "global::System.Guid"));
            options.Scalars.Add(new("Duration", "global::NodaTime.Duration"));
            options.Scalars.Add(new("OffsetDateTime", "global::NodaTime.OffsetDateTime"));
            options.Scalars.Add(new("OffsetDate", "global::NodaTime.OffsetDate"));
            options.Scalars.Add(new("OffsetTime", "global::NodaTime.OffsetTime"));
            return options;
        }
    }
}
