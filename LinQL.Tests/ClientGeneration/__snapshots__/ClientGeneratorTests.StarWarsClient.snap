#nullable enable
#pragma warning disable CS8618
namespace StarWars
{
    using System.Text.Json;
    using LinQL;
    using LinQL.Description;
    using LinQL.Translation;
    using Microsoft.Extensions.Logging;
    using Microsoft.Extensions.DependencyInjection;

    [GraphQLType(Name = "Root")]
    [OperationType(RootOperationType.Query)]
    public partial class Root : RootType<Root>
    {
        public FilmsConnection? AllFilms { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "allFilms")]
        public FilmsConnection? ExecuteAllFilms([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => AllFilms;
        public PeopleConnection? AllPeople { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "allPeople")]
        public PeopleConnection? ExecuteAllPeople([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => AllPeople;
        public PlanetsConnection? AllPlanets { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "allPlanets")]
        public PlanetsConnection? ExecuteAllPlanets([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => AllPlanets;
        public SpeciesConnection? AllSpecies { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "allSpecies")]
        public SpeciesConnection? ExecuteAllSpecies([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => AllSpecies;
        public StarshipsConnection? AllStarships { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "allStarships")]
        public StarshipsConnection? ExecuteAllStarships([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => AllStarships;
        public VehiclesConnection? AllVehicles { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "allVehicles")]
        public VehiclesConnection? ExecuteAllVehicles([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => AllVehicles;
        public Film? Film { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "film")]
        public Film? ExecuteFilm([GraphQLArgument(GQLType = "ID")] string? filmID, [GraphQLArgument(GQLType = "ID")] string? id) => Film;
        public Node? Node { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "node")]
        public Node? ExecuteNode([GraphQLArgument(GQLType = "ID!")] string id) => Node;
        public Person? Person { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "person")]
        public Person? ExecutePerson([GraphQLArgument(GQLType = "ID")] string? id, [GraphQLArgument(GQLType = "ID")] string? personID) => Person;
        public Planet? Planet { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "planet")]
        public Planet? ExecutePlanet([GraphQLArgument(GQLType = "ID")] string? id, [GraphQLArgument(GQLType = "ID")] string? planetID) => Planet;
        public Species? Species { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "species")]
        public Species? ExecuteSpecies([GraphQLArgument(GQLType = "ID")] string? id, [GraphQLArgument(GQLType = "ID")] string? speciesID) => Species;
        public Starship? Starship { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "starship")]
        public Starship? ExecuteStarship([GraphQLArgument(GQLType = "ID")] string? id, [GraphQLArgument(GQLType = "ID")] string? starshipID) => Starship;
        public Vehicle? Vehicle { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "vehicle")]
        public Vehicle? ExecuteVehicle([GraphQLArgument(GQLType = "ID")] string? id, [GraphQLArgument(GQLType = "ID")] string? vehicleID) => Vehicle;
    }

    [GraphQLType(Name = "Film")]
    public partial class Film : Node
    {
        public string? Created { get; set; }
        public string? Director { get; set; }
        public string? Edited { get; set; }
        public int? EpisodeID { get; set; }
        public string Id { get; set; }
        public string? OpeningCrawl { get; set; }
        public string[]? Producers { get; set; }
        public string? ReleaseDate { get; set; }
        public string? Title { get; set; }
        public FilmCharactersConnection? CharacterConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "characterConnection")]
        public FilmCharactersConnection? ExecuteCharacterConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => CharacterConnection;
        public FilmPlanetsConnection? PlanetConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "planetConnection")]
        public FilmPlanetsConnection? ExecutePlanetConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => PlanetConnection;
        public FilmSpeciesConnection? SpeciesConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "speciesConnection")]
        public FilmSpeciesConnection? ExecuteSpeciesConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => SpeciesConnection;
        public FilmStarshipsConnection? StarshipConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "starshipConnection")]
        public FilmStarshipsConnection? ExecuteStarshipConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => StarshipConnection;
        public FilmVehiclesConnection? VehicleConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "vehicleConnection")]
        public FilmVehiclesConnection? ExecuteVehicleConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => VehicleConnection;
    }

    [GraphQLType(Name = "FilmCharactersConnection")]
    public partial class FilmCharactersConnection
    {
        public Person[]? Characters { get; set; }
        public FilmCharactersEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "FilmCharactersEdge")]
    public partial class FilmCharactersEdge
    {
        public string Cursor { get; set; }
        public Person? Node { get; set; }
    }

    [GraphQLType(Name = "FilmPlanetsConnection")]
    public partial class FilmPlanetsConnection
    {
        public FilmPlanetsEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public Planet[]? Planets { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "FilmPlanetsEdge")]
    public partial class FilmPlanetsEdge
    {
        public string Cursor { get; set; }
        public Planet? Node { get; set; }
    }

    [GraphQLType(Name = "FilmSpeciesConnection")]
    public partial class FilmSpeciesConnection
    {
        public FilmSpeciesEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public Species[]? Species { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "FilmSpeciesEdge")]
    public partial class FilmSpeciesEdge
    {
        public string Cursor { get; set; }
        public Species? Node { get; set; }
    }

    [GraphQLType(Name = "FilmStarshipsConnection")]
    public partial class FilmStarshipsConnection
    {
        public FilmStarshipsEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public Starship[]? Starships { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "FilmStarshipsEdge")]
    public partial class FilmStarshipsEdge
    {
        public string Cursor { get; set; }
        public Starship? Node { get; set; }
    }

    [GraphQLType(Name = "FilmVehiclesConnection")]
    public partial class FilmVehiclesConnection
    {
        public FilmVehiclesEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
        public Vehicle[]? Vehicles { get; set; }
    }

    [GraphQLType(Name = "FilmVehiclesEdge")]
    public partial class FilmVehiclesEdge
    {
        public string Cursor { get; set; }
        public Vehicle? Node { get; set; }
    }

    [GraphQLType(Name = "FilmsConnection")]
    public partial class FilmsConnection
    {
        public FilmsEdge[]? Edges { get; set; }
        public Film[]? Films { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "FilmsEdge")]
    public partial class FilmsEdge
    {
        public string Cursor { get; set; }
        public Film? Node { get; set; }
    }

    [GraphQLType(Name = "Node")]
    public partial interface Node
    {
        public string Id { get; set; }
    }

    [GraphQLType(Name = "PageInfo")]
    public partial class PageInfo
    {
        public string? EndCursor { get; set; }
        public bool HasNextPage { get; set; }
        public bool HasPreviousPage { get; set; }
        public string? StartCursor { get; set; }
    }

    [GraphQLType(Name = "PeopleConnection")]
    public partial class PeopleConnection
    {
        public PeopleEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public Person[]? People { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "PeopleEdge")]
    public partial class PeopleEdge
    {
        public string Cursor { get; set; }
        public Person? Node { get; set; }
    }

    [GraphQLType(Name = "Person")]
    public partial class Person : Node
    {
        public string? BirthYear { get; set; }
        public string? Created { get; set; }
        public string? Edited { get; set; }
        public string? EyeColor { get; set; }
        public string? Gender { get; set; }
        public string? HairColor { get; set; }
        public int? Height { get; set; }
        public Planet? Homeworld { get; set; }
        public string Id { get; set; }
        public float? Mass { get; set; }
        public string? Name { get; set; }
        public string? SkinColor { get; set; }
        public Species? Species { get; set; }
        public PersonFilmsConnection? FilmConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "filmConnection")]
        public PersonFilmsConnection? ExecuteFilmConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => FilmConnection;
        public PersonStarshipsConnection? StarshipConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "starshipConnection")]
        public PersonStarshipsConnection? ExecuteStarshipConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => StarshipConnection;
        public PersonVehiclesConnection? VehicleConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "vehicleConnection")]
        public PersonVehiclesConnection? ExecuteVehicleConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => VehicleConnection;
    }

    [GraphQLType(Name = "PersonFilmsConnection")]
    public partial class PersonFilmsConnection
    {
        public PersonFilmsEdge[]? Edges { get; set; }
        public Film[]? Films { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "PersonFilmsEdge")]
    public partial class PersonFilmsEdge
    {
        public string Cursor { get; set; }
        public Film? Node { get; set; }
    }

    [GraphQLType(Name = "PersonStarshipsConnection")]
    public partial class PersonStarshipsConnection
    {
        public PersonStarshipsEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public Starship[]? Starships { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "PersonStarshipsEdge")]
    public partial class PersonStarshipsEdge
    {
        public string Cursor { get; set; }
        public Starship? Node { get; set; }
    }

    [GraphQLType(Name = "PersonVehiclesConnection")]
    public partial class PersonVehiclesConnection
    {
        public PersonVehiclesEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
        public Vehicle[]? Vehicles { get; set; }
    }

    [GraphQLType(Name = "PersonVehiclesEdge")]
    public partial class PersonVehiclesEdge
    {
        public string Cursor { get; set; }
        public Vehicle? Node { get; set; }
    }

    [GraphQLType(Name = "Planet")]
    public partial class Planet : Node
    {
        public string[]? Climates { get; set; }
        public string? Created { get; set; }
        public int? Diameter { get; set; }
        public string? Edited { get; set; }
        public string? Gravity { get; set; }
        public string Id { get; set; }
        public string? Name { get; set; }
        public int? OrbitalPeriod { get; set; }
        public float? Population { get; set; }
        public int? RotationPeriod { get; set; }
        public float? SurfaceWater { get; set; }
        public string[]? Terrains { get; set; }
        public PlanetFilmsConnection? FilmConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "filmConnection")]
        public PlanetFilmsConnection? ExecuteFilmConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => FilmConnection;
        public PlanetResidentsConnection? ResidentConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "residentConnection")]
        public PlanetResidentsConnection? ExecuteResidentConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => ResidentConnection;
    }

    [GraphQLType(Name = "PlanetFilmsConnection")]
    public partial class PlanetFilmsConnection
    {
        public PlanetFilmsEdge[]? Edges { get; set; }
        public Film[]? Films { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "PlanetFilmsEdge")]
    public partial class PlanetFilmsEdge
    {
        public string Cursor { get; set; }
        public Film? Node { get; set; }
    }

    [GraphQLType(Name = "PlanetResidentsConnection")]
    public partial class PlanetResidentsConnection
    {
        public PlanetResidentsEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public Person[]? Residents { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "PlanetResidentsEdge")]
    public partial class PlanetResidentsEdge
    {
        public string Cursor { get; set; }
        public Person? Node { get; set; }
    }

    [GraphQLType(Name = "PlanetsConnection")]
    public partial class PlanetsConnection
    {
        public PlanetsEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public Planet[]? Planets { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "PlanetsEdge")]
    public partial class PlanetsEdge
    {
        public string Cursor { get; set; }
        public Planet? Node { get; set; }
    }

    [GraphQLType(Name = "Species")]
    public partial class Species : Node
    {
        public float? AverageHeight { get; set; }
        public int? AverageLifespan { get; set; }
        public string? Classification { get; set; }
        public string? Created { get; set; }
        public string? Designation { get; set; }
        public string? Edited { get; set; }
        public string[]? EyeColors { get; set; }
        public string[]? HairColors { get; set; }
        public Planet? Homeworld { get; set; }
        public string Id { get; set; }
        public string? Language { get; set; }
        public string? Name { get; set; }
        public string[]? SkinColors { get; set; }
        public SpeciesFilmsConnection? FilmConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "filmConnection")]
        public SpeciesFilmsConnection? ExecuteFilmConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => FilmConnection;
        public SpeciesPeopleConnection? PersonConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "personConnection")]
        public SpeciesPeopleConnection? ExecutePersonConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => PersonConnection;
    }

    [GraphQLType(Name = "SpeciesConnection")]
    public partial class SpeciesConnection
    {
        public SpeciesEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public Species[]? Species { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "SpeciesEdge")]
    public partial class SpeciesEdge
    {
        public string Cursor { get; set; }
        public Species? Node { get; set; }
    }

    [GraphQLType(Name = "SpeciesFilmsConnection")]
    public partial class SpeciesFilmsConnection
    {
        public SpeciesFilmsEdge[]? Edges { get; set; }
        public Film[]? Films { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "SpeciesFilmsEdge")]
    public partial class SpeciesFilmsEdge
    {
        public string Cursor { get; set; }
        public Film? Node { get; set; }
    }

    [GraphQLType(Name = "SpeciesPeopleConnection")]
    public partial class SpeciesPeopleConnection
    {
        public SpeciesPeopleEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public Person[]? People { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "SpeciesPeopleEdge")]
    public partial class SpeciesPeopleEdge
    {
        public string Cursor { get; set; }
        public Person? Node { get; set; }
    }

    [GraphQLType(Name = "Starship")]
    public partial class Starship : Node
    {
        public int? Mglt { get; set; }
        public float? CargoCapacity { get; set; }
        public string? Consumables { get; set; }
        public float? CostInCredits { get; set; }
        public string? Created { get; set; }
        public string? Crew { get; set; }
        public string? Edited { get; set; }
        public float? HyperdriveRating { get; set; }
        public string Id { get; set; }
        public float? Length { get; set; }
        public string[]? Manufacturers { get; set; }
        public int? MaxAtmospheringSpeed { get; set; }
        public string? Model { get; set; }
        public string? Name { get; set; }
        public string? Passengers { get; set; }
        public string? StarshipClass { get; set; }
        public StarshipFilmsConnection? FilmConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "filmConnection")]
        public StarshipFilmsConnection? ExecuteFilmConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => FilmConnection;
        public StarshipPilotsConnection? PilotConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "pilotConnection")]
        public StarshipPilotsConnection? ExecutePilotConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => PilotConnection;
    }

    [GraphQLType(Name = "StarshipFilmsConnection")]
    public partial class StarshipFilmsConnection
    {
        public StarshipFilmsEdge[]? Edges { get; set; }
        public Film[]? Films { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "StarshipFilmsEdge")]
    public partial class StarshipFilmsEdge
    {
        public string Cursor { get; set; }
        public Film? Node { get; set; }
    }

    [GraphQLType(Name = "StarshipPilotsConnection")]
    public partial class StarshipPilotsConnection
    {
        public StarshipPilotsEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public Person[]? Pilots { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "StarshipPilotsEdge")]
    public partial class StarshipPilotsEdge
    {
        public string Cursor { get; set; }
        public Person? Node { get; set; }
    }

    [GraphQLType(Name = "StarshipsConnection")]
    public partial class StarshipsConnection
    {
        public StarshipsEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public Starship[]? Starships { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "StarshipsEdge")]
    public partial class StarshipsEdge
    {
        public string Cursor { get; set; }
        public Starship? Node { get; set; }
    }

    [GraphQLType(Name = "Vehicle")]
    public partial class Vehicle : Node
    {
        public float? CargoCapacity { get; set; }
        public string? Consumables { get; set; }
        public float? CostInCredits { get; set; }
        public string? Created { get; set; }
        public string? Crew { get; set; }
        public string? Edited { get; set; }
        public string Id { get; set; }
        public float? Length { get; set; }
        public string[]? Manufacturers { get; set; }
        public int? MaxAtmospheringSpeed { get; set; }
        public string? Model { get; set; }
        public string? Name { get; set; }
        public string? Passengers { get; set; }
        public string? VehicleClass { get; set; }
        public VehicleFilmsConnection? FilmConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "filmConnection")]
        public VehicleFilmsConnection? ExecuteFilmConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => FilmConnection;
        public VehiclePilotsConnection? PilotConnection { get; set; } = null !;

        [GraphQLOperation, GraphQLField(Name = "pilotConnection")]
        public VehiclePilotsConnection? ExecutePilotConnection([GraphQLArgument(GQLType = "String")] string? after, [GraphQLArgument(GQLType = "String")] string? before, [GraphQLArgument(GQLType = "Int")] int? first, [GraphQLArgument(GQLType = "Int")] int? last) => PilotConnection;
    }

    [GraphQLType(Name = "VehicleFilmsConnection")]
    public partial class VehicleFilmsConnection
    {
        public VehicleFilmsEdge[]? Edges { get; set; }
        public Film[]? Films { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "VehicleFilmsEdge")]
    public partial class VehicleFilmsEdge
    {
        public string Cursor { get; set; }
        public Film? Node { get; set; }
    }

    [GraphQLType(Name = "VehiclePilotsConnection")]
    public partial class VehiclePilotsConnection
    {
        public VehiclePilotsEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public Person[]? Pilots { get; set; }
        public int? TotalCount { get; set; }
    }

    [GraphQLType(Name = "VehiclePilotsEdge")]
    public partial class VehiclePilotsEdge
    {
        public string Cursor { get; set; }
        public Person? Node { get; set; }
    }

    [GraphQLType(Name = "VehiclesConnection")]
    public partial class VehiclesConnection
    {
        public VehiclesEdge[]? Edges { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
        public Vehicle[]? Vehicles { get; set; }
    }

    [GraphQLType(Name = "VehiclesEdge")]
    public partial class VehiclesEdge
    {
        public string Cursor { get; set; }
        public Vehicle? Node { get; set; }
    }

    public static class LinQLOptionExtensions
    {
        public static LinQLOptions WithKnownScalars(this LinQLOptions options)
        {
            options.Scalars.Add(new("Int", "int"));
            options.Scalars.Add(new("Float", "float"));
            options.Scalars.Add(new("String", "string"));
            options.Scalars.Add(new("Id", "string"));
            options.Scalars.Add(new("Boolean", "bool"));
            return options;
        }
    }

    public static class JsonSerializerOptionsExtensions
    {
        public static JsonSerializerOptions WithKnownInterfaces(this JsonSerializerOptions options)
        {
            options.RegisterInterface<Node>(typeof(Film), typeof(Person), typeof(Planet), typeof(Species), typeof(Starship), typeof(Vehicle));
            return options;
        }
    }
}
